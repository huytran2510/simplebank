// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package db

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO Product (
ProductId,ProductName, Price, StockQuantity
) VALUES (
    '$1', '$2', '$3', "$4"
) 
RETURNING productid, productname, price, stockquantity
`

type CreateProductParams struct {
    ProductId     int32
    ProductName   string
    Price         float64  
    StockQuantity int32
}
 
 
func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
    row := q.db.QueryRowContext(ctx, createProduct, arg.ProductId, arg.ProductName, arg.Price, arg.StockQuantity)
    var i Product
    err := row.Scan(
        &i.Productid,
        &i.Productname,
        &i.Price,
        &i.Stockquantity,
    )
    return i, err
}

const deleteProduct = `-- name: DeleteProduct :one
DELETE 
FROM Product
WHERE ProductId = $1
RETURNING productid, productname, price, stockquantity
`

func (q *Queries) DeleteProduct(ctx context.Context, productid int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, deleteProduct, productid)
	var i Product
	err := row.Scan(
		&i.Productid,
		&i.Productname,
		&i.Price,
		&i.Stockquantity,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT productid, productname, price, stockquantity FROM Product
Where ProductId =$1 LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, productid int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, productid)
	var i Product
	err := row.Scan(
		&i.Productid,
		&i.Productname,
		&i.Price,
		&i.Stockquantity,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE Product
SET ProductName = $1
WHERE ProductId = $2
RETURNING productid, productname, price, stockquantity
`

type UpdateProductParams struct {
	Productname string `json:"productname"`
	Productid   int32  `json:"productid"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct, arg.Productname, arg.Productid)
	var i Product
	err := row.Scan(
		&i.Productid,
		&i.Productname,
		&i.Price,
		&i.Stockquantity,
	)
	return i, err
}
